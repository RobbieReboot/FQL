//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\projects\Chevin\Sandbox\FQL\FQL.Parser\FQLLexer.g4 by ANTLR 4.13.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace FQL.Parser {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.0")]
[System.CLSCompliant(false)]
public partial class FQLLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		BEGIN=1, END=2, READ=3, WRITE=4, PRINT=5, CONNECTION=6, VAR=7, IF=8, ELSE=9, 
		RETURN=10, TRUE=11, FALSE=12, INTERPOLATED_STRING_START=13, STRING_END=14, 
		INTERPOLATION_START=15, STRING_CONTENT=16, INTERPOLATION_END=17, INTERPOLATION_ID=18, 
		OPEN_BRACKET=19, CLOSE_BRACKET=20, OPEN_PARENS=21, CLOSE_PARENS=22, OPEN_BRACE=23, 
		CLOSE_BRACE=24, DOT=25, COMMA=26, COLON=27, SEMICOLON=28, PLUS=29, MINUS=30, 
		ASTERISK=31, DIVIDE=32, PERCENT=33, AMP=34, BITWISE_OR=35, CARET=36, BANG=37, 
		TILDE=38, ASSIGNMENT=39, LT=40, GT=41, OP_INC=42, OP_DEC=43, OP_AND=44, 
		OP_OR=45, OP_EQ=46, OP_NE=47, OP_LE=48, OP_GE=49, STRING=50, ID=51, INTEGER=52, 
		FLOAT=53, SINGLE_LINE_COMMENT=54, MULTI_LINE_COMMENT=55, WS=56;
	public const int
		COMMENTS_CHANNEL=2;
	public const int
		INTERPOLATED_STRING_MODE=1, INTERPOLATION_MODE=2;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN", "COMMENTS_CHANNEL"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE", "INTERPOLATED_STRING_MODE", "INTERPOLATION_MODE"
	};

	public static readonly string[] ruleNames = {
		"BEGIN", "END", "READ", "WRITE", "PRINT", "CONNECTION", "VAR", "IF", "ELSE", 
		"RETURN", "TRUE", "FALSE", "INTERPOLATED_STRING_START", "STRING_END", 
		"INTERPOLATION_START", "STRING_CONTENT", "INTERPOLATION_END", "INTERPOLATION_ID", 
		"OPEN_BRACKET", "CLOSE_BRACKET", "OPEN_PARENS", "CLOSE_PARENS", "OPEN_BRACE", 
		"CLOSE_BRACE", "DOT", "COMMA", "COLON", "SEMICOLON", "PLUS", "MINUS", 
		"ASTERISK", "DIVIDE", "PERCENT", "AMP", "BITWISE_OR", "CARET", "BANG", 
		"TILDE", "ASSIGNMENT", "LT", "GT", "OP_INC", "OP_DEC", "OP_AND", "OP_OR", 
		"OP_EQ", "OP_NE", "OP_LE", "OP_GE", "STRING", "ID", "INTEGER", "FLOAT", 
		"SINGLE_LINE_COMMENT", "MULTI_LINE_COMMENT", "WS"
	};


	public FQLLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public FQLLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'begin'", "'end'", "'read'", "'write'", "'print'", "'connection'", 
		"'var'", "'if'", "'else'", "'return'", "'true'", "'false'", "'$\"'", "'\"'", 
		null, null, null, null, "'['", "']'", "'('", "')'", null, null, "'.'", 
		"','", "':'", "';'", "'+'", "'-'", "'*'", "'/'", "'%'", "'&'", "'|'", 
		"'^'", "'!'", "'~'", "'='", "'<'", "'>'", "'++'", "'--'", "'&&'", "'||'", 
		"'=='", "'!='", "'<='", "'>='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "BEGIN", "END", "READ", "WRITE", "PRINT", "CONNECTION", "VAR", "IF", 
		"ELSE", "RETURN", "TRUE", "FALSE", "INTERPOLATED_STRING_START", "STRING_END", 
		"INTERPOLATION_START", "STRING_CONTENT", "INTERPOLATION_END", "INTERPOLATION_ID", 
		"OPEN_BRACKET", "CLOSE_BRACKET", "OPEN_PARENS", "CLOSE_PARENS", "OPEN_BRACE", 
		"CLOSE_BRACE", "DOT", "COMMA", "COLON", "SEMICOLON", "PLUS", "MINUS", 
		"ASTERISK", "DIVIDE", "PERCENT", "AMP", "BITWISE_OR", "CARET", "BANG", 
		"TILDE", "ASSIGNMENT", "LT", "GT", "OP_INC", "OP_DEC", "OP_AND", "OP_OR", 
		"OP_EQ", "OP_NE", "OP_LE", "OP_GE", "STRING", "ID", "INTEGER", "FLOAT", 
		"SINGLE_LINE_COMMENT", "MULTI_LINE_COMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "FQLLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static FQLLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,56,343,6,-1,6,-1,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,
		7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,
		7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,
		7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
		7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,
		7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,
		7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,
		7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,
		7,55,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,3,1,
		3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
		1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,
		9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,
		1,11,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,
		1,15,4,15,198,8,15,11,15,12,15,199,1,16,1,16,1,16,1,16,1,17,1,17,5,17,
		208,8,17,10,17,12,17,211,9,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,
		1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,
		1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,
		1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,41,1,42,
		1,42,1,42,1,43,1,43,1,43,1,44,1,44,1,44,1,45,1,45,1,45,1,46,1,46,1,46,
		1,47,1,47,1,47,1,48,1,48,1,48,1,49,1,49,5,49,285,8,49,10,49,12,49,288,
		9,49,1,49,1,49,1,50,1,50,5,50,294,8,50,10,50,12,50,297,9,50,1,51,4,51,
		300,8,51,11,51,12,51,301,1,52,4,52,305,8,52,11,52,12,52,306,1,52,1,52,
		4,52,311,8,52,11,52,12,52,312,1,53,1,53,1,53,1,53,5,53,319,8,53,10,53,
		12,53,322,9,53,1,53,1,53,1,54,1,54,1,54,1,54,5,54,330,8,54,10,54,12,54,
		333,9,54,1,54,1,54,1,54,1,54,1,54,1,55,1,55,1,55,1,55,1,331,0,56,3,1,5,
		2,7,3,9,4,11,5,13,6,15,7,17,8,19,9,21,10,23,11,25,12,27,13,29,14,31,15,
		33,16,35,17,37,18,39,19,41,20,43,21,45,22,47,23,49,24,51,25,53,26,55,27,
		57,28,59,29,61,30,63,31,65,32,67,33,69,34,71,35,73,36,75,37,77,38,79,39,
		81,40,83,41,85,42,87,43,89,44,91,45,93,46,95,47,97,48,99,49,101,50,103,
		51,105,52,107,53,109,54,111,55,113,56,3,0,1,2,7,3,0,34,34,123,123,125,
		125,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,3,0,10,10,13,13,
		34,34,1,0,48,57,4,0,10,10,13,13,133,133,8232,8233,3,0,9,10,13,13,32,32,
		349,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,
		1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,
		0,0,25,1,0,0,0,0,27,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,
		1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,
		0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,
		1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,
		0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,
		1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,
		0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,
		0,0,111,1,0,0,0,0,113,1,0,0,0,1,29,1,0,0,0,1,31,1,0,0,0,1,33,1,0,0,0,2,
		35,1,0,0,0,2,37,1,0,0,0,3,115,1,0,0,0,5,121,1,0,0,0,7,125,1,0,0,0,9,130,
		1,0,0,0,11,136,1,0,0,0,13,142,1,0,0,0,15,153,1,0,0,0,17,157,1,0,0,0,19,
		160,1,0,0,0,21,165,1,0,0,0,23,172,1,0,0,0,25,177,1,0,0,0,27,183,1,0,0,
		0,29,188,1,0,0,0,31,192,1,0,0,0,33,197,1,0,0,0,35,201,1,0,0,0,37,205,1,
		0,0,0,39,212,1,0,0,0,41,214,1,0,0,0,43,216,1,0,0,0,45,218,1,0,0,0,47,220,
		1,0,0,0,49,222,1,0,0,0,51,224,1,0,0,0,53,226,1,0,0,0,55,228,1,0,0,0,57,
		230,1,0,0,0,59,232,1,0,0,0,61,234,1,0,0,0,63,236,1,0,0,0,65,238,1,0,0,
		0,67,240,1,0,0,0,69,242,1,0,0,0,71,244,1,0,0,0,73,246,1,0,0,0,75,248,1,
		0,0,0,77,250,1,0,0,0,79,252,1,0,0,0,81,254,1,0,0,0,83,256,1,0,0,0,85,258,
		1,0,0,0,87,261,1,0,0,0,89,264,1,0,0,0,91,267,1,0,0,0,93,270,1,0,0,0,95,
		273,1,0,0,0,97,276,1,0,0,0,99,279,1,0,0,0,101,282,1,0,0,0,103,291,1,0,
		0,0,105,299,1,0,0,0,107,304,1,0,0,0,109,314,1,0,0,0,111,325,1,0,0,0,113,
		339,1,0,0,0,115,116,5,98,0,0,116,117,5,101,0,0,117,118,5,103,0,0,118,119,
		5,105,0,0,119,120,5,110,0,0,120,4,1,0,0,0,121,122,5,101,0,0,122,123,5,
		110,0,0,123,124,5,100,0,0,124,6,1,0,0,0,125,126,5,114,0,0,126,127,5,101,
		0,0,127,128,5,97,0,0,128,129,5,100,0,0,129,8,1,0,0,0,130,131,5,119,0,0,
		131,132,5,114,0,0,132,133,5,105,0,0,133,134,5,116,0,0,134,135,5,101,0,
		0,135,10,1,0,0,0,136,137,5,112,0,0,137,138,5,114,0,0,138,139,5,105,0,0,
		139,140,5,110,0,0,140,141,5,116,0,0,141,12,1,0,0,0,142,143,5,99,0,0,143,
		144,5,111,0,0,144,145,5,110,0,0,145,146,5,110,0,0,146,147,5,101,0,0,147,
		148,5,99,0,0,148,149,5,116,0,0,149,150,5,105,0,0,150,151,5,111,0,0,151,
		152,5,110,0,0,152,14,1,0,0,0,153,154,5,118,0,0,154,155,5,97,0,0,155,156,
		5,114,0,0,156,16,1,0,0,0,157,158,5,105,0,0,158,159,5,102,0,0,159,18,1,
		0,0,0,160,161,5,101,0,0,161,162,5,108,0,0,162,163,5,115,0,0,163,164,5,
		101,0,0,164,20,1,0,0,0,165,166,5,114,0,0,166,167,5,101,0,0,167,168,5,116,
		0,0,168,169,5,117,0,0,169,170,5,114,0,0,170,171,5,110,0,0,171,22,1,0,0,
		0,172,173,5,116,0,0,173,174,5,114,0,0,174,175,5,117,0,0,175,176,5,101,
		0,0,176,24,1,0,0,0,177,178,5,102,0,0,178,179,5,97,0,0,179,180,5,108,0,
		0,180,181,5,115,0,0,181,182,5,101,0,0,182,26,1,0,0,0,183,184,5,36,0,0,
		184,185,5,34,0,0,185,186,1,0,0,0,186,187,6,12,0,0,187,28,1,0,0,0,188,189,
		5,34,0,0,189,190,1,0,0,0,190,191,6,13,1,0,191,30,1,0,0,0,192,193,5,123,
		0,0,193,194,1,0,0,0,194,195,6,14,2,0,195,32,1,0,0,0,196,198,8,0,0,0,197,
		196,1,0,0,0,198,199,1,0,0,0,199,197,1,0,0,0,199,200,1,0,0,0,200,34,1,0,
		0,0,201,202,5,125,0,0,202,203,1,0,0,0,203,204,6,16,1,0,204,36,1,0,0,0,
		205,209,7,1,0,0,206,208,7,2,0,0,207,206,1,0,0,0,208,211,1,0,0,0,209,207,
		1,0,0,0,209,210,1,0,0,0,210,38,1,0,0,0,211,209,1,0,0,0,212,213,5,91,0,
		0,213,40,1,0,0,0,214,215,5,93,0,0,215,42,1,0,0,0,216,217,5,40,0,0,217,
		44,1,0,0,0,218,219,5,41,0,0,219,46,1,0,0,0,220,221,5,123,0,0,221,48,1,
		0,0,0,222,223,5,125,0,0,223,50,1,0,0,0,224,225,5,46,0,0,225,52,1,0,0,0,
		226,227,5,44,0,0,227,54,1,0,0,0,228,229,5,58,0,0,229,56,1,0,0,0,230,231,
		5,59,0,0,231,58,1,0,0,0,232,233,5,43,0,0,233,60,1,0,0,0,234,235,5,45,0,
		0,235,62,1,0,0,0,236,237,5,42,0,0,237,64,1,0,0,0,238,239,5,47,0,0,239,
		66,1,0,0,0,240,241,5,37,0,0,241,68,1,0,0,0,242,243,5,38,0,0,243,70,1,0,
		0,0,244,245,5,124,0,0,245,72,1,0,0,0,246,247,5,94,0,0,247,74,1,0,0,0,248,
		249,5,33,0,0,249,76,1,0,0,0,250,251,5,126,0,0,251,78,1,0,0,0,252,253,5,
		61,0,0,253,80,1,0,0,0,254,255,5,60,0,0,255,82,1,0,0,0,256,257,5,62,0,0,
		257,84,1,0,0,0,258,259,5,43,0,0,259,260,5,43,0,0,260,86,1,0,0,0,261,262,
		5,45,0,0,262,263,5,45,0,0,263,88,1,0,0,0,264,265,5,38,0,0,265,266,5,38,
		0,0,266,90,1,0,0,0,267,268,5,124,0,0,268,269,5,124,0,0,269,92,1,0,0,0,
		270,271,5,61,0,0,271,272,5,61,0,0,272,94,1,0,0,0,273,274,5,33,0,0,274,
		275,5,61,0,0,275,96,1,0,0,0,276,277,5,60,0,0,277,278,5,61,0,0,278,98,1,
		0,0,0,279,280,5,62,0,0,280,281,5,61,0,0,281,100,1,0,0,0,282,286,5,34,0,
		0,283,285,8,3,0,0,284,283,1,0,0,0,285,288,1,0,0,0,286,284,1,0,0,0,286,
		287,1,0,0,0,287,289,1,0,0,0,288,286,1,0,0,0,289,290,5,34,0,0,290,102,1,
		0,0,0,291,295,7,1,0,0,292,294,7,2,0,0,293,292,1,0,0,0,294,297,1,0,0,0,
		295,293,1,0,0,0,295,296,1,0,0,0,296,104,1,0,0,0,297,295,1,0,0,0,298,300,
		2,48,57,0,299,298,1,0,0,0,300,301,1,0,0,0,301,299,1,0,0,0,301,302,1,0,
		0,0,302,106,1,0,0,0,303,305,7,4,0,0,304,303,1,0,0,0,305,306,1,0,0,0,306,
		304,1,0,0,0,306,307,1,0,0,0,307,308,1,0,0,0,308,310,5,46,0,0,309,311,7,
		4,0,0,310,309,1,0,0,0,311,312,1,0,0,0,312,310,1,0,0,0,312,313,1,0,0,0,
		313,108,1,0,0,0,314,315,5,47,0,0,315,316,5,47,0,0,316,320,1,0,0,0,317,
		319,8,5,0,0,318,317,1,0,0,0,319,322,1,0,0,0,320,318,1,0,0,0,320,321,1,
		0,0,0,321,323,1,0,0,0,322,320,1,0,0,0,323,324,6,53,3,0,324,110,1,0,0,0,
		325,326,5,47,0,0,326,327,5,42,0,0,327,331,1,0,0,0,328,330,9,0,0,0,329,
		328,1,0,0,0,330,333,1,0,0,0,331,332,1,0,0,0,331,329,1,0,0,0,332,334,1,
		0,0,0,333,331,1,0,0,0,334,335,5,42,0,0,335,336,5,47,0,0,336,337,1,0,0,
		0,337,338,6,54,3,0,338,112,1,0,0,0,339,340,7,6,0,0,340,341,1,0,0,0,341,
		342,6,55,4,0,342,114,1,0,0,0,12,0,1,2,199,209,286,295,301,306,312,320,
		331,5,5,1,0,4,0,0,5,2,0,0,2,0,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace FQL.Parser
