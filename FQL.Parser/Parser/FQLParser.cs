//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\projects\Chevin\Sandbox\FQL\FQL.Parser\FQLParser.g4 by ANTLR 4.13.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace FQL.Parser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.0")]
[System.CLSCompliant(false)]
public partial class FQLParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		BEGIN=1, END=2, READ=3, WRITE=4, PRINT=5, CONNECTION=6, VAR=7, OPEN_BRACE=8, 
		CLOSE_BRACE=9, INTERPOLATED_STRING_START=10, STRING_END=11, INTERPOLATION_START=12, 
		STRING_CONTENT=13, INTERPOLATION_END=14, INTERPOLATION_ID=15, OPEN_BRACKET=16, 
		CLOSE_BRACKET=17, OPEN_PARENS=18, CLOSE_PARENS=19, DOT=20, COMMA=21, COLON=22, 
		SEMICOLON=23, PLUS=24, MINUS=25, STAR=26, DIV=27, PERCENT=28, AMP=29, 
		BITWISE_OR=30, CARET=31, BANG=32, TILDE=33, ASSIGNMENT=34, LT=35, GT=36, 
		INTERR=37, DOUBLE_COLON=38, OP_COALESCING=39, OP_INC=40, OP_DEC=41, OP_AND=42, 
		OP_OR=43, OP_PTR=44, OP_EQ=45, OP_NE=46, OP_LE=47, OP_GE=48, OP_ADD_ASSIGNMENT=49, 
		OP_SUB_ASSIGNMENT=50, OP_MULT_ASSIGNMENT=51, OP_DIV_ASSIGNMENT=52, OP_MOD_ASSIGNMENT=53, 
		OP_AND_ASSIGNMENT=54, OP_OR_ASSIGNMENT=55, OP_XOR_ASSIGNMENT=56, OP_LEFT_SHIFT=57, 
		OP_LEFT_SHIFT_ASSIGNMENT=58, OP_COALESCING_ASSIGNMENT=59, OP_RANGE=60, 
		STRING=61, ID=62, NUMBER=63, SINGLE_LINE_COMMENT=64, MULTI_LINE_COMMENT=65, 
		WS=66;
	public const int
		RULE_program = 0, RULE_statements = 1, RULE_statement = 2, RULE_printStatement = 3, 
		RULE_printParams = 4, RULE_assignment = 5, RULE_readStatement = 6, RULE_writeStatement = 7, 
		RULE_connectionStatement = 8, RULE_identifierList = 9, RULE_expressionList = 10, 
		RULE_expression = 11, RULE_factor = 12, RULE_integer = 13, RULE_operator = 14, 
		RULE_identifier = 15, RULE_string = 16, RULE_interpolatedString = 17, 
		RULE_interpolation = 18;
	public static readonly string[] ruleNames = {
		"program", "statements", "statement", "printStatement", "printParams", 
		"assignment", "readStatement", "writeStatement", "connectionStatement", 
		"identifierList", "expressionList", "expression", "factor", "integer", 
		"operator", "identifier", "string", "interpolatedString", "interpolation"
	};

	private static readonly string[] _LiteralNames = {
		null, "'begin'", "'end'", "'read'", "'write'", "'print'", "'connection'", 
		"'var'", null, null, "'$\"'", "'\"'", null, null, null, null, "'['", "']'", 
		"'('", "')'", "'.'", "','", "':'", "';'", "'+'", "'-'", "'*'", "'/'", 
		"'%'", "'&'", "'|'", "'^'", "'!'", "'~'", "'='", "'<'", "'>'", "'?'", 
		"'::'", "'??'", "'++'", "'--'", "'&&'", "'||'", "'->'", "'=='", "'!='", 
		"'<='", "'>='", "'+='", "'-='", "'*='", "'/='", "'%='", "'&='", "'|='", 
		"'^='", "'<<'", "'<<='", "'??='", "'..'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "BEGIN", "END", "READ", "WRITE", "PRINT", "CONNECTION", "VAR", "OPEN_BRACE", 
		"CLOSE_BRACE", "INTERPOLATED_STRING_START", "STRING_END", "INTERPOLATION_START", 
		"STRING_CONTENT", "INTERPOLATION_END", "INTERPOLATION_ID", "OPEN_BRACKET", 
		"CLOSE_BRACKET", "OPEN_PARENS", "CLOSE_PARENS", "DOT", "COMMA", "COLON", 
		"SEMICOLON", "PLUS", "MINUS", "STAR", "DIV", "PERCENT", "AMP", "BITWISE_OR", 
		"CARET", "BANG", "TILDE", "ASSIGNMENT", "LT", "GT", "INTERR", "DOUBLE_COLON", 
		"OP_COALESCING", "OP_INC", "OP_DEC", "OP_AND", "OP_OR", "OP_PTR", "OP_EQ", 
		"OP_NE", "OP_LE", "OP_GE", "OP_ADD_ASSIGNMENT", "OP_SUB_ASSIGNMENT", "OP_MULT_ASSIGNMENT", 
		"OP_DIV_ASSIGNMENT", "OP_MOD_ASSIGNMENT", "OP_AND_ASSIGNMENT", "OP_OR_ASSIGNMENT", 
		"OP_XOR_ASSIGNMENT", "OP_LEFT_SHIFT", "OP_LEFT_SHIFT_ASSIGNMENT", "OP_COALESCING_ASSIGNMENT", 
		"OP_RANGE", "STRING", "ID", "NUMBER", "SINGLE_LINE_COMMENT", "MULTI_LINE_COMMENT", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "FQLParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static FQLParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public FQLParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public FQLParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(FQLParser.Eof, 0); }
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFQLParserVisitor<TResult> typedVisitor = visitor as IFQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 38;
			statements(0);
			State = 39;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		public StatementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFQLParserVisitor<TResult> typedVisitor = visitor as IFQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementsContext statements() {
		return statements(0);
	}

	private StatementsContext statements(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		StatementsContext _localctx = new StatementsContext(Context, _parentState);
		StatementsContext _prevctx = _localctx;
		int _startState = 2;
		EnterRecursionRule(_localctx, 2, RULE_statements, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 42;
			statement();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 48;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new StatementsContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_statements);
					State = 44;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 45;
					statement();
					}
					} 
				}
				State = 50;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(FQLParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReadStatementContext readStatement() {
			return GetRuleContext<ReadStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WriteStatementContext writeStatement() {
			return GetRuleContext<WriteStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintStatementContext printStatement() {
			return GetRuleContext<PrintStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConnectionStatementContext connectionStatement() {
			return GetRuleContext<ConnectionStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFQLParserVisitor<TResult> typedVisitor = visitor as IFQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			State = 66;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VAR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 51;
				assignment();
				State = 52;
				Match(SEMICOLON);
				}
				break;
			case READ:
				EnterOuterAlt(_localctx, 2);
				{
				State = 54;
				readStatement();
				State = 55;
				Match(SEMICOLON);
				}
				break;
			case WRITE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 57;
				writeStatement();
				State = 58;
				Match(SEMICOLON);
				}
				break;
			case PRINT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 60;
				printStatement();
				State = 61;
				Match(SEMICOLON);
				}
				break;
			case CONNECTION:
				EnterOuterAlt(_localctx, 5);
				{
				State = 63;
				connectionStatement();
				State = 64;
				Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRINT() { return GetToken(FQLParser.PRINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrintParamsContext printParams() {
			return GetRuleContext<PrintParamsContext>(0);
		}
		public PrintStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFQLParserVisitor<TResult> typedVisitor = visitor as IFQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintStatementContext printStatement() {
		PrintStatementContext _localctx = new PrintStatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_printStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 68;
			Match(PRINT);
			State = 69;
			printParams();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintParamsContext : ParserRuleContext {
		public PrintParamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printParams; } }
	 
		public PrintParamsContext() { }
		public virtual void CopyFrom(PrintParamsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PrintIdentifierContext : PrintParamsContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public PrintIdentifierContext(PrintParamsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFQLParserVisitor<TResult> typedVisitor = visitor as IFQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrintStringContext : PrintParamsContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public PrintStringContext(PrintParamsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFQLParserVisitor<TResult> typedVisitor = visitor as IFQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintParamsContext printParams() {
		PrintParamsContext _localctx = new PrintParamsContext(Context, State);
		EnterRule(_localctx, 8, RULE_printParams);
		try {
			State = 73;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTERPOLATED_STRING_START:
			case STRING:
				_localctx = new PrintStringContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 71;
				@string();
				}
				break;
			case ID:
				_localctx = new PrintIdentifierContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 72;
				identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(FQLParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(FQLParser.ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFQLParserVisitor<TResult> typedVisitor = visitor as IFQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 10, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 75;
			Match(VAR);
			State = 76;
			identifier();
			State = 77;
			Match(ASSIGNMENT);
			State = 78;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReadStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(FQLParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		public ReadStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_readStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFQLParserVisitor<TResult> typedVisitor = visitor as IFQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReadStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReadStatementContext readStatement() {
		ReadStatementContext _localctx = new ReadStatementContext(Context, State);
		EnterRule(_localctx, 12, RULE_readStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80;
			Match(READ);
			State = 81;
			identifierList(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WriteStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRITE() { return GetToken(FQLParser.WRITE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public WriteStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_writeStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFQLParserVisitor<TResult> typedVisitor = visitor as IFQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWriteStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WriteStatementContext writeStatement() {
		WriteStatementContext _localctx = new WriteStatementContext(Context, State);
		EnterRule(_localctx, 14, RULE_writeStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 83;
			Match(WRITE);
			State = 84;
			expressionList(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConnectionStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION() { return GetToken(FQLParser.CONNECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public ConnectionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_connectionStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFQLParserVisitor<TResult> typedVisitor = visitor as IFQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConnectionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConnectionStatementContext connectionStatement() {
		ConnectionStatementContext _localctx = new ConnectionStatementContext(Context, State);
		EnterRule(_localctx, 16, RULE_connectionStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 86;
			Match(CONNECTION);
			State = 87;
			@string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(FQLParser.COMMA, 0); }
		public IdentifierListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFQLParserVisitor<TResult> typedVisitor = visitor as IFQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierListContext identifierList() {
		return identifierList(0);
	}

	private IdentifierListContext identifierList(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		IdentifierListContext _localctx = new IdentifierListContext(Context, _parentState);
		IdentifierListContext _prevctx = _localctx;
		int _startState = 18;
		EnterRecursionRule(_localctx, 18, RULE_identifierList, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 90;
			identifier();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 97;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new IdentifierListContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_identifierList);
					State = 92;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 93;
					Match(COMMA);
					State = 94;
					identifier();
					}
					} 
				}
				State = 99;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExpressionListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(FQLParser.COMMA, 0); }
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFQLParserVisitor<TResult> typedVisitor = visitor as IFQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		return expressionList(0);
	}

	private ExpressionListContext expressionList(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionListContext _localctx = new ExpressionListContext(Context, _parentState);
		ExpressionListContext _prevctx = _localctx;
		int _startState = 20;
		EnterRecursionRule(_localctx, 20, RULE_expressionList, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 101;
			expression();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 108;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ExpressionListContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_expressionList);
					State = 103;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 104;
					Match(COMMA);
					State = 105;
					expression();
					}
					} 
				}
				State = 110;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ComplexFactorContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperatorContext @operator() {
			return GetRuleContext<OperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ComplexFactorContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFQLParserVisitor<TResult> typedVisitor = visitor as IFQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComplexFactor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleFactorContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		public SimpleFactorContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFQLParserVisitor<TResult> typedVisitor = visitor as IFQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleFactor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 22, RULE_expression);
		try {
			State = 116;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				_localctx = new ComplexFactorContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 111;
				factor();
				State = 112;
				@operator();
				State = 113;
				expression();
				}
				break;
			case 2:
				_localctx = new SimpleFactorContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 115;
				factor();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
	 
		public FactorContext() { }
		public virtual void CopyFrom(FactorContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IdentifierFactorContext : FactorContext {
		public IdentifierContext id;
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public IdentifierFactorContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFQLParserVisitor<TResult> typedVisitor = visitor as IFQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierFactor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringFactorContext : FactorContext {
		public StringContext str;
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public StringFactorContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFQLParserVisitor<TResult> typedVisitor = visitor as IFQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringFactor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenExprContext : FactorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(FQLParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(FQLParser.CLOSE_PARENS, 0); }
		public ParenExprContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFQLParserVisitor<TResult> typedVisitor = visitor as IFQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntFactorContext : FactorContext {
		public IntegerContext i;
		[System.Diagnostics.DebuggerNonUserCode] public IntegerContext integer() {
			return GetRuleContext<IntegerContext>(0);
		}
		public IntFactorContext(FactorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFQLParserVisitor<TResult> typedVisitor = visitor as IFQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntFactor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(Context, State);
		EnterRule(_localctx, 24, RULE_factor);
		try {
			State = 125;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				_localctx = new IdentifierFactorContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 118;
				((IdentifierFactorContext)_localctx).id = identifier();
				}
				break;
			case INTERPOLATED_STRING_START:
			case STRING:
				_localctx = new StringFactorContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 119;
				((StringFactorContext)_localctx).str = @string();
				}
				break;
			case MINUS:
			case NUMBER:
				_localctx = new IntFactorContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 120;
				((IntFactorContext)_localctx).i = integer();
				}
				break;
			case OPEN_PARENS:
				_localctx = new ParenExprContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 121;
				Match(OPEN_PARENS);
				State = 122;
				expression();
				State = 123;
				Match(CLOSE_PARENS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(FQLParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(FQLParser.MINUS, 0); }
		public IntegerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFQLParserVisitor<TResult> typedVisitor = visitor as IFQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInteger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntegerContext integer() {
		IntegerContext _localctx = new IntegerContext(Context, State);
		EnterRule(_localctx, 26, RULE_integer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 128;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MINUS) {
				{
				State = 127;
				Match(MINUS);
				}
			}

			State = 130;
			Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(FQLParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(FQLParser.MINUS, 0); }
		public OperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFQLParserVisitor<TResult> typedVisitor = visitor as IFQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorContext @operator() {
		OperatorContext _localctx = new OperatorContext(Context, State);
		EnterRule(_localctx, 28, RULE_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 132;
			_la = TokenStream.LA(1);
			if ( !(_la==PLUS || _la==MINUS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(FQLParser.ID, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFQLParserVisitor<TResult> typedVisitor = visitor as IFQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 30, RULE_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 134;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
	 
		public StringContext() { }
		public virtual void CopyFrom(StringContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class InterpolationStringContext : StringContext {
		[System.Diagnostics.DebuggerNonUserCode] public InterpolatedStringContext interpolatedString() {
			return GetRuleContext<InterpolatedStringContext>(0);
		}
		public InterpolationStringContext(StringContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFQLParserVisitor<TResult> typedVisitor = visitor as IFQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterpolationString(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringLiteralContext : StringContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(FQLParser.STRING, 0); }
		public StringLiteralContext(StringContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFQLParserVisitor<TResult> typedVisitor = visitor as IFQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 32, RULE_string);
		try {
			State = 138;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTERPOLATED_STRING_START:
				_localctx = new InterpolationStringContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 136;
				interpolatedString();
				}
				break;
			case STRING:
				_localctx = new StringLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 137;
				Match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterpolatedStringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERPOLATED_STRING_START() { return GetToken(FQLParser.INTERPOLATED_STRING_START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_END() { return GetToken(FQLParser.STRING_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING_CONTENT() { return GetTokens(FQLParser.STRING_CONTENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_CONTENT(int i) {
			return GetToken(FQLParser.STRING_CONTENT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterpolationContext[] interpolation() {
			return GetRuleContexts<InterpolationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterpolationContext interpolation(int i) {
			return GetRuleContext<InterpolationContext>(i);
		}
		public InterpolatedStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interpolatedString; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFQLParserVisitor<TResult> typedVisitor = visitor as IFQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterpolatedString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterpolatedStringContext interpolatedString() {
		InterpolatedStringContext _localctx = new InterpolatedStringContext(Context, State);
		EnterRule(_localctx, 34, RULE_interpolatedString);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 140;
			Match(INTERPOLATED_STRING_START);
			State = 145;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==INTERPOLATION_START || _la==STRING_CONTENT) {
				{
				State = 143;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case STRING_CONTENT:
					{
					State = 141;
					Match(STRING_CONTENT);
					}
					break;
				case INTERPOLATION_START:
					{
					State = 142;
					interpolation();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 147;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 148;
			Match(STRING_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterpolationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERPOLATION_START() { return GetToken(FQLParser.INTERPOLATION_START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERPOLATION_ID() { return GetToken(FQLParser.INTERPOLATION_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERPOLATION_END() { return GetToken(FQLParser.INTERPOLATION_END, 0); }
		public InterpolationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interpolation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFQLParserVisitor<TResult> typedVisitor = visitor as IFQLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterpolation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterpolationContext interpolation() {
		InterpolationContext _localctx = new InterpolationContext(Context, State);
		EnterRule(_localctx, 36, RULE_interpolation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 150;
			Match(INTERPOLATION_START);
			State = 151;
			Match(INTERPOLATION_ID);
			State = 152;
			Match(INTERPOLATION_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return statements_sempred((StatementsContext)_localctx, predIndex);
		case 9: return identifierList_sempred((IdentifierListContext)_localctx, predIndex);
		case 10: return expressionList_sempred((ExpressionListContext)_localctx, predIndex);
		}
		return true;
	}
	private bool statements_sempred(StatementsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		}
		return true;
	}
	private bool identifierList_sempred(IdentifierListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 2);
		}
		return true;
	}
	private bool expressionList_sempred(ExpressionListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 2);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,66,155,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,
		1,5,1,47,8,1,10,1,12,1,50,9,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
		1,2,1,2,1,2,1,2,1,2,3,2,67,8,2,1,3,1,3,1,3,1,4,1,4,3,4,74,8,4,1,5,1,5,
		1,5,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,
		9,5,9,96,8,9,10,9,12,9,99,9,9,1,10,1,10,1,10,1,10,1,10,1,10,5,10,107,8,
		10,10,10,12,10,110,9,10,1,11,1,11,1,11,1,11,1,11,3,11,117,8,11,1,12,1,
		12,1,12,1,12,1,12,1,12,1,12,3,12,126,8,12,1,13,3,13,129,8,13,1,13,1,13,
		1,14,1,14,1,15,1,15,1,16,1,16,3,16,139,8,16,1,17,1,17,1,17,5,17,144,8,
		17,10,17,12,17,147,9,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,0,3,2,18,20,
		19,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,0,1,1,0,24,25,151,
		0,38,1,0,0,0,2,41,1,0,0,0,4,66,1,0,0,0,6,68,1,0,0,0,8,73,1,0,0,0,10,75,
		1,0,0,0,12,80,1,0,0,0,14,83,1,0,0,0,16,86,1,0,0,0,18,89,1,0,0,0,20,100,
		1,0,0,0,22,116,1,0,0,0,24,125,1,0,0,0,26,128,1,0,0,0,28,132,1,0,0,0,30,
		134,1,0,0,0,32,138,1,0,0,0,34,140,1,0,0,0,36,150,1,0,0,0,38,39,3,2,1,0,
		39,40,5,0,0,1,40,1,1,0,0,0,41,42,6,1,-1,0,42,43,3,4,2,0,43,48,1,0,0,0,
		44,45,10,2,0,0,45,47,3,4,2,0,46,44,1,0,0,0,47,50,1,0,0,0,48,46,1,0,0,0,
		48,49,1,0,0,0,49,3,1,0,0,0,50,48,1,0,0,0,51,52,3,10,5,0,52,53,5,23,0,0,
		53,67,1,0,0,0,54,55,3,12,6,0,55,56,5,23,0,0,56,67,1,0,0,0,57,58,3,14,7,
		0,58,59,5,23,0,0,59,67,1,0,0,0,60,61,3,6,3,0,61,62,5,23,0,0,62,67,1,0,
		0,0,63,64,3,16,8,0,64,65,5,23,0,0,65,67,1,0,0,0,66,51,1,0,0,0,66,54,1,
		0,0,0,66,57,1,0,0,0,66,60,1,0,0,0,66,63,1,0,0,0,67,5,1,0,0,0,68,69,5,5,
		0,0,69,70,3,8,4,0,70,7,1,0,0,0,71,74,3,32,16,0,72,74,3,30,15,0,73,71,1,
		0,0,0,73,72,1,0,0,0,74,9,1,0,0,0,75,76,5,7,0,0,76,77,3,30,15,0,77,78,5,
		34,0,0,78,79,3,22,11,0,79,11,1,0,0,0,80,81,5,3,0,0,81,82,3,18,9,0,82,13,
		1,0,0,0,83,84,5,4,0,0,84,85,3,20,10,0,85,15,1,0,0,0,86,87,5,6,0,0,87,88,
		3,32,16,0,88,17,1,0,0,0,89,90,6,9,-1,0,90,91,3,30,15,0,91,97,1,0,0,0,92,
		93,10,2,0,0,93,94,5,21,0,0,94,96,3,30,15,0,95,92,1,0,0,0,96,99,1,0,0,0,
		97,95,1,0,0,0,97,98,1,0,0,0,98,19,1,0,0,0,99,97,1,0,0,0,100,101,6,10,-1,
		0,101,102,3,22,11,0,102,108,1,0,0,0,103,104,10,2,0,0,104,105,5,21,0,0,
		105,107,3,22,11,0,106,103,1,0,0,0,107,110,1,0,0,0,108,106,1,0,0,0,108,
		109,1,0,0,0,109,21,1,0,0,0,110,108,1,0,0,0,111,112,3,24,12,0,112,113,3,
		28,14,0,113,114,3,22,11,0,114,117,1,0,0,0,115,117,3,24,12,0,116,111,1,
		0,0,0,116,115,1,0,0,0,117,23,1,0,0,0,118,126,3,30,15,0,119,126,3,32,16,
		0,120,126,3,26,13,0,121,122,5,18,0,0,122,123,3,22,11,0,123,124,5,19,0,
		0,124,126,1,0,0,0,125,118,1,0,0,0,125,119,1,0,0,0,125,120,1,0,0,0,125,
		121,1,0,0,0,126,25,1,0,0,0,127,129,5,25,0,0,128,127,1,0,0,0,128,129,1,
		0,0,0,129,130,1,0,0,0,130,131,5,63,0,0,131,27,1,0,0,0,132,133,7,0,0,0,
		133,29,1,0,0,0,134,135,5,62,0,0,135,31,1,0,0,0,136,139,3,34,17,0,137,139,
		5,61,0,0,138,136,1,0,0,0,138,137,1,0,0,0,139,33,1,0,0,0,140,145,5,10,0,
		0,141,144,5,13,0,0,142,144,3,36,18,0,143,141,1,0,0,0,143,142,1,0,0,0,144,
		147,1,0,0,0,145,143,1,0,0,0,145,146,1,0,0,0,146,148,1,0,0,0,147,145,1,
		0,0,0,148,149,5,11,0,0,149,35,1,0,0,0,150,151,5,12,0,0,151,152,5,15,0,
		0,152,153,5,14,0,0,153,37,1,0,0,0,11,48,66,73,97,108,116,125,128,138,143,
		145
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace FQL.Parser
