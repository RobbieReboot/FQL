var healthCheck = get("https://wa-fqlservice-dev-uksouth-001.azurewebsites.net/health-check");
var h1 = healthCheck.entries["FQLService liveness"].description;
print $"Health FQLService liveness description :  {h1}";

h1 = healthCheck.entries["FQLService liveness"].tags[0];
print $"{h1}";
var h2 = healthCheck.entries["FQLServiceContext Custom Check"].tags[0];
print $"{h2}";


//Test multi line string literals (with interpolation)
var h = "Hello";
var w = "World";

var multi = $"a 
Multi 
Line
{h} {w}
string";

print "---------- Multiline START --------------";
print multi;
print "---------- Multiline END   --------------";


//var forecast = get("https://wa-fqlservice-dev-uksouth-001.azurewebsites.net/weatherforecast");

healthCheck = get("https://wa-fqlservice-dev-uksouth-001.azurewebsites.net/health-check");

h1 = healthCheck.entries["FQLService liveness"].description;
print $"Health FQLService liveness description :  {h1}";
h2 = healthCheck.entries["FQLService liveness"].tags[0];
print $"{h2}";
var h3 = healthCheck.entries["FQLServiceContext Custom Check"].tags[0];
print $"{h3}";
//print $"healthCheck.entries['FQLService liveness'].tags[0] = {h1}";

// Test for nested calling
function TestHello(h,w) {
	print $"{h} {w}";
}

function TestFunction1(incoming1) {
	print "In TestFunction1";
	print $"parameter : {incoming1}";
	var newVar = "This is a var defined in Function1, passed to Function2";

	//Call function from function to test scoped symbols.

	TestFunction2(newVar);
	return 45;
    print "Unreachable code!";
}

function TestFunction2(incoming2) {
	print "In TestFunction2";
	print $"parameter {incoming2}";
	TestFunction3("Hello","World");
}

function TestFunction3(h,w) {
	print "In TestFunction2";
	print $"{h} {w} (Function3)";
	dump callstack;
	dump symbols;
}
function GetHello() {
	return "Hello";
}
print "Calling Function1";
TestFunction1("TestFuntion1 Call Param");
var x = 10;

print "Testing While Loop - 10 iterations, break after 5";

while (x-- > 0) {
	print $"X = {x}";
	if (x == 5) {
		break;
	}
}
print "Testing Do While Loop - 10 iterations, break after 7";
x=10;
do {
	x = x-1;
	print $"X = {x}";
	if (x == 3) {
		break;
	}
} 
while(x!=0);

/* var multi = $"a 
Multi 
Line
{h} {w}
string";

print "---------- Multiline START --------------";
print multi;
print "---------- Multiline END   --------------";
*/
print "Calling TestHello(GetHello(),\"World\") - nested function calls";
TestHello((GetHello()),"World");

print "Calling TestFunction(MyVar0)!";
var MyVar0 = "a var in GlobalScope";

var returnedVal = TestFunction1(MyVar0);			
print $"TestFunction1 returned {returnedVal}";

var myval = 1;
if ( myval == 1 ) {
	print "IN IF!"; 
	print "If is TRUE!"; 
//	return true;
}
else
{
	print "if is FALSE!";
}

var MyVar1 = (5+4)+10;
var MyVar2 = "Hello";
var MyVar3 = "World";
var MyVar4 = $"Interpolated : {MyVar2}, {MyVar3}";

print $"String interpolation says {MyVar2} {MyVar3}";
print MyVar4;

var database = "sqldb-daprservice";

// Single line comment for connection string.
connection $"Data Source=.\;Integrated Security=SSPI;Initial Catalog={database};MultipleActiveResultSets=True;Encrypt=false;TrustServerCertificate=true";

// do some db commands

/* MULTI line comment for local Database connection details.
Database                       : sqldb-receipt-service
User                           : dapruser
Password                              : ySwp0aGAmhI1jns0wgkb5zmH9iuW7AMQ
*/

print $"Connection String = {connection}";		// Auto creates internal symbol for connection string.


var forecast = get("https://wa-fqlservice-dev-uksouth-001.azurewebsites.net/weatherforecastX");
print $"forecast = \n {forecast}";

/*
Sample from the Weather forecast endpoint.
[
  {
    "date": "2023-08-27T16:32:31.1886994+00:00",
    "temperatureC": 38,
    "temperatureF": 100,
    "summary": "Freezing"
  },
  {
    "date": "2023-08-28T16:32:31.1887438+00:00",
    "temperatureC": 49,
    "temperatureF": 120,
    "summary": "Scorching"
  },
  {
    "date": "2023-08-29T16:32:31.1887445+00:00",
    "temperatureC": 41,
    "temperatureF": 105,
    "summary": "Balmy"
  },
  {
    "date": "2023-08-30T16:32:31.1887447+00:00",
    "temperatureC": 28,
    "temperatureF": 82,
    "summary": "Mild"
  },
  {
    "date": "2023-08-31T16:32:31.1887449+00:00",
    "temperatureC": 35,
    "temperatureF": 94,
    "summary": "Sweltering"
  }
]

*/

var temp1 = forecast[0].temperatureC;
print $"Temperature forecast[0].temperatureC = {temp1}";


/*
Sample from Health endpoint.
{
    "status": "Healthy",
    "totalDuration": "00:00:00.0322611",
    "entries": {
        "FQLService liveness": {
            "data": {},
            "description": "Service execution is healthy.",
            "duration": "00:00:00.0306582",
            "status": "Healthy",
            "tags": [
                "web-service-check"
            ]
        },
        "sql-server-connection-check": {
            "data": {},
            "description": "The SQL server Connection is healthy.",
            "duration": "00:00:00.0000584",
            "status": "Healthy",
            "tags": [
                "sql-connection-check"
            ]
        },
        "sql-server-operation-check": {
            "data": {},
            "description": "SQL Server operations are healthy.",
            "duration": "00:00:00.0024768",
            "status": "Healthy",
            "tags": [
                "sql-operation-check"
            ]
        },
        "FQLServiceContext check": {
            "data": {},
            "duration": "00:00:00.0036429",
            "status": "Healthy",
            "tags": [
                "efcontext-check"
            ]
        },
        "FQLServiceContext Custom Check": {
            "data": {},
            "description": "The database context's connection is healthy.",
            "duration": "00:00:00.0001761",
            "status": "Healthy",
            "tags": [
                "efcontext-db-check"
            ]
        }
    }
}
*/

healthCheck = get("https://wa-fqlservice-dev-uksouth-001.azurewebsites.net/health-check");

h1 = healthCheck.entries["FQLService liveness"].description;
print $"Health FQLService liveness description :  {h1}";

h1 = healthCheck.entries["FQLService liveness"].tags[0];
print $"{h1}";
h2 = healthCheck.entries["FQLServiceContext Custom Check"].tags[0];
print $"{h2}";
return true;
